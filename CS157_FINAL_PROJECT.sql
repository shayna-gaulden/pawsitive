CREATE DATABASE IF NOT EXISTS Pawsitive;
USE Pawsitive;

DROP TABLE IF EXISTS BOOKINGS;
DROP TABLE IF EXISTS DOGS;
DROP TABLE IF EXISTS CUSTOMERS;
DROP TABLE IF EXISTS SCHEDULES;
DROP TABLE IF EXISTS SERVICES;
DROP TABLE IF EXISTS EMPLOYEES;
DROP TABLE IF EXISTS DEPARTMENTS;
DROP TABLE IF EXISTS USERS;
DROP VIEW IF EXISTS EMPLOYEES_VW ;
DROP VIEW IF EXISTS CALENDAR_VW;
DROP VIEW IF EXISTS SCHEDULES_ALL_VW;
DROP VIEW IF EXISTS TOTAL_PRICE_VW;

-- Create Tables
CREATE TABLE CUSTOMERS (
    USER_ID VARCHAR(50),
    CUST_NAME VARCHAR(40) NOT NULL, 
    PHONE_NUMBER VARCHAR(20) NOT NULL, 
    ADDRESS TEXT NOT NULL,
    CITY VARCHAR(20) NOT NULL,
    STATE VARCHAR(20) NOT NULL, 
    ZIPCODE VARCHAR(10) NOT NULL, 
    COUNTRY VARCHAR(20) NOT NULL,
    CONSTRAINT CUSTOMER_PK_USER_ID PRIMARY KEY (USER_ID)
);

CREATE TABLE DOGS (
    DOG_ID INT NOT NULL AUTO_INCREMENT, 
    USER_ID VARCHAR(50) NOT NULL, 
    DOG_NAME VARCHAR(20) NOT NULL, 
    SIZE VARCHAR(20) NOT NULL, 
    BREED VARCHAR(20) NOT NULL, 
    SPAYED_NEUTERED INT NOT NULL,
    VACCINATED INT NOT NULL DEFAULT 0,
    AGE INT NOT NULL, 
    GENDER VARCHAR(1) NOT NULL, 
    CONSTRAINT DOG_PK_DOG_ID PRIMARY KEY (DOG_ID)
);

CREATE TABLE EMPLOYEES (
    USER_ID VARCHAR(50),
    DEPARTMENT VARCHAR(20) NOT NULL,
    EMP_NAME VARCHAR(40) NOT NULL,
    ADDRESS TEXT NOT NULL,
    CITY VARCHAR(20) NOT NULL,
    STATE VARCHAR(20) NOT NULL,
    ZIPCODE VARCHAR(10) NOT NULL,
    COUNTRY VARCHAR(20) NOT NULL,
    SOCIAL_SECURITY_NUMBER INT(9) UNIQUE,
    CONSTRAINT EMPLOYEE_PK_USER_ID PRIMARY KEY (USER_ID)
);

CREATE TABLE SCHEDULES (
    USER_ID VARCHAR(50),
    TIME_DATE DATETIME NOT NULL,
    SUB_ID INT NOT NULL,
    CONSTRAINT SCHEDULES_PK_EMP_ID_TIME_DATE PRIMARY KEY (USER_ID, TIME_DATE, SUB_ID)
);

CREATE TABLE SERVICES (
    SERVICE VARCHAR(100),
    DETAILS TEXT,
    PRICE DECIMAL(10,2) NOT NULL,
    DEPARTMENT VARCHAR(20) NOT NULL,
    CONSTRAINT SERVICES_PK_SERVICE PRIMARY KEY (SERVICE)
);

CREATE TABLE BOOKINGS (
    DOG_ID INT,
    USER_ID VARCHAR(50),
    TIME_DATE DATETIME,
    SERVICE VARCHAR(40) NOT NULL,
    SUB_ID INT NOT NULL,
    CONSTRAINT BOOKINGS_PK_DOG_ID_EMP_ID_TIME_DATE PRIMARY KEY (DOG_ID, USER_ID, TIME_DATE)
);

CREATE TABLE DEPARTMENTS (
    DEPARTMENT VARCHAR(20) NOT NULL,
    DETAILS TEXT,
    CONSTRAINT DEPARTMENT_PK_DEPATMENT PRIMARY KEY (DEPARTMENT)
);

CREATE TABLE USERS (
	USER_ID VARCHAR(50),
    PW VARCHAR(30) NOT NULL,
    USER_TYPE VARCHAR(30) NOT NULL,
    CONSTRAINT USERS_PK_USER_ID PRIMARY KEY (USER_ID)
);

-- Add foriegn keys
ALTER TABLE CUSTOMERS ADD CONSTRAINT CUSTOMER_FK_USER_ID 
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE;
ALTER TABLE DOGS ADD CONSTRAINT DOGS_FK_USER_ID
    FOREIGN KEY (USER_ID) REFERENCES CUSTOMERS (USER_ID) ON DELETE CASCADE;
ALTER TABLE SERVICES ADD CONSTRAINT SERVICES_FK_DEPARTMENT
    FOREIGN KEY (DEPARTMENT) REFERENCES DEPARTMENTS (DEPARTMENT) ON DELETE CASCADE;
ALTER TABLE BOOKINGS ADD CONSTRAINT BOOKINGS_FK_DOG_ID
    FOREIGN KEY (DOG_ID) REFERENCES DOGS (DOG_ID) ON DELETE CASCADE;
ALTER TABLE BOOKINGS ADD CONSTRAINT BOOKINGS_FK_SERVICE
    FOREIGN KEY (SERVICE) REFERENCES SERVICES (SERVICE) ON DELETE CASCADE;
ALTER TABLE BOOKINGS ADD CONSTRAINT BOOKINGS_FK_USER_ID_TIME_DATE_SUB_ID
    FOREIGN KEY (USER_ID, TIME_DATE,SUB_ID) REFERENCES SCHEDULES (USER_ID, TIME_DATE, SUB_ID) ON DELETE CASCADE;
ALTER TABLE SCHEDULES ADD CONSTRAINT SCHEDULES_FK_USER_ID
    FOREIGN KEY (USER_ID) REFERENCES EMPLOYEES (USER_ID) ON DELETE CASCADE;
ALTER TABLE EMPLOYEES ADD CONSTRAINT EMPLOYEES_FK_DEPARTMENT
    FOREIGN KEY (DEPARTMENT) REFERENCES DEPARTMENTS (DEPARTMENT) ON DELETE CASCADE;
ALTER TABLE EMPLOYEES ADD CONSTRAINT EMPLOYEES_FK_USER_ID
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE;

-- Create Views
CREATE VIEW EMPLOYEES_VW AS (
    SELECT DEPARTMENT, EMP_NAME, ADDRESS, CITY, STATE, ZIPCODE, COUNTRY
    FROM EMPLOYEES
);

CREATE VIEW CALENDAR_VW AS(
    SELECT E.USER_ID, E.DEPARTMENT, S1.TIME_DATE , E.EMP_NAME, S1.SUB_ID
    FROM SCHEDULES AS S1 JOIN EMPLOYEES AS E ON S1.USER_ID = E.USER_ID
                         JOIN DEPARTMENTS AS D ON D.DEPARTMENT = E.DEPARTMENT
                         LEFT JOIN BOOKINGS AS B ON S1.USER_ID = B.USER_ID AND S1.TIME_DATE = B.TIME_DATE AND B.SUB_ID = S1.SUB_ID
    WHERE B.USER_ID IS NULL AND (E.DEPARTMENT='Grooming' OR E.DEPARTMENT='Training' OR E.DEPARTMENT='Boarding')
);

-- note the customer and employee user ID will be hidden in the UI but,
-- are needed in order to match the view to the tables when deleting/adding from the UI
CREATE VIEW SCHEDULES_ALL_VW AS (
    SELECT E.DEPARTMENT, E.EMP_NAME, B.SERVICE, S.TIME_DATE, C.CUST_NAME, D.DOG_NAME, C.USER_ID, E.USER_ID AS EMP_ID
    FROM SCHEDULES AS S
    LEFT JOIN BOOKINGS AS B ON (B.USER_ID = S.USER_ID AND B.TIME_DATE = S.TIME_DATE AND B.SUB_ID = S.SUB_ID)
    JOIN EMPLOYEES AS E ON E.USER_ID = S.USER_ID
    LEFT JOIN DOGS AS D ON D.DOG_ID = B.DOG_ID
    LEFT JOIN CUSTOMERS AS C ON C.USER_ID = D.USER_ID
);

CREATE VIEW TOTAL_PRICE_VW AS(
    SELECT Y.USER_ID, Y.DOG_NAME, S.SERVICE, B.TIME_DATE,S.PRICE, Y.TOTAL
    FROM BOOKINGS AS B
        JOIN
            (SELECT USER_ID,DOG_ID,DOG_NAME, SUM(PRICE) AS TOTAL
            FROM (SELECT  D.USER_ID,D.DOG_ID, D.DOG_NAME, B.TIME_DATE, S.SERVICE, S.PRICE
            FROM BOOKINGS AS B JOIN SERVICES AS S ON B.SERVICE = S.SERVICE
                            JOIN DOGS     AS D ON D.DOG_ID  = B.DOG_ID) AS X
            GROUP BY 1,2) AS Y
        ON B.DOG_ID = Y.DOG_ID
        JOIN 
            SERVICES AS S ON B.SERVICE = S.SERVICE 
    ORDER BY Y.DOG_NAME
);
